<?xml version="1.0" encoding="utf-8"?>
<templates id="template" xml:space="preserve">
<t t-name="web_editor.SnippetOptionComponent">
    <t t-set="className" t-value="`snippet-option-${props.snippetOption.name}`"/>
    <we-customizeblock-option t-att-class="{'d-none': !renderContext.showUI, [className]: true}">
        <!-- Some options do not have a template -->
        <t t-if="props.snippetOption.template" t-call="{{props.snippetOption.template}}"/>
    </we-customizeblock-option>
</t>
<t t-name="web_editor.TestSnippetOption">
    <WeMediapicker mediaType="'videos'"/>
    <WeButton selectClass="'test_class'">Test Class</WeButton>
    <WeRow>
        <t t-set-slot="title">Checkbox</t>
        <WeCheckbox selectClass="'test_class'">Test Class</WeCheckbox>
    </WeRow>
    <WeSelect>
        <WeButton selectClass="'test_class_1'" name="'test_class_1'">Test Class 1</WeButton>
        <WeButton selectClass="'test_class_2'">Test Class 2</WeButton>
        <WeButton selectClass="'test_class_3'">Test Class 3</WeButton>
        <WeButton selectClass="'test_class_4'">Test Class 4</WeButton>
        <WeButton selectClass="'test_class_5'">Test Class 5</WeButton>
    </WeSelect>
    <WeButtonGroup>
        <t t-set-slot="title">Test Button Group</t>
        <WeButton selectClass="'test_class_6'">6</WeButton>
        <WeButton selectClass="'test_class_7'">7</WeButton>
        <WeButton selectClass="'test_class_8'">8</WeButton>
    </WeButtonGroup>
    <WeInput unit="'px'" step="'5'" selectStyle="'0'" cssProperty="'border-width'" extraClass="'border'"/>
    <WeDatetime selectDataAttribute="''" attributeName="'datetime'"/>
    <WeDatetime selectDataAttribute="''" attributeName="'dateonly'" pickerType="'date'"/>
    <WeButton selectClass="''" dependencies="'test_class_1'">Show when test_class_1</WeButton>
    <WeRow>
        <t t-set-slot="title">Row</t>
        <WeButton dependencies="'test_class_1'" selectClass="'visible_class_test'">Button</WeButton>
    </WeRow>
    <WeRow>
        <t t-set-slot="title">Low to high</t>
        <WeRange selectDataAttribute="''"
            attributeName="'range'"
            min="'-100'"
            step="'10'"/>
    </WeRow>
    <WeRow>
        <t t-set-slot="title">High to low</t>
        <WeRange string="'Reversed Range'"
                selectDataAttribute="''"
                attributeName="'revrange'"
                displayRangeValue="'true'"
                min="'100'"
                max="'-100'"
                step="'10'"/>
    </WeRow>
    <WeMulti cssProperty="'box-shadow'" variable="'menu-box-shadow'">
        <WeRow class="o_we_sublevel_1">
            <t t-set-slot="title">Color</t>
            <WeColorpicker multiSequence="10" selectStyle="''" cssCompatible="''"/>
        </WeRow>
        <WeRow class="o_we_sublevel_1">
            <t t-set-slot="title">Offset (X, Y)</t>
            <WeInput multiSequence="20" unit="'px'" selectStyle="''"/>
            <WeInput multiSequence="30" unit="'px'" selectStyle="''"/>
        </WeRow>
        <WeRow class="o_we_sublevel_1">
            <t t-set-slot="title">Blur</t>
            <WeInput multiSequence="40" unit="'px'" selectStyle="''"/>
        </WeRow>
        <WeRow class="o_we_sublevel_1">
            <t t-set-slot="title">Spread</t>
            <WeInput multiSequence="50" unit="'px'" selectStyle="''"/>
        </WeRow>
        <!-- Inset parameter always hidden (as controlled above) but needed -->
        <!-- for the we-multi widget to work properly. -->
        <!-- name="fake_inset_shadow_opt" -->
        <WeCheckbox multiSequence="60" selectStyle="'inset'"/>
    </WeMulti>
    <!-- Try with `hasDefault` = unique/multiple or not set,  with/out `addItemTitle`, `inputType` = number, with/out `defaultValue`,
        with/out `availableRecords`, with/out `unsortable`, `notEditable`, `allowEmpty`, `newElementsNotToggleable`, `renderOnInputBlur`
    -->
    <WeList addItemTitle="'Add new item to list'" renderListItems="''" hasDefault="'unique'" availableRecords='`[{"id":1,"title":"delectus   aut   autem","completed":false,"display_name":"delectus   aut   autem"},{"id":2,"title":"quis ut nam facilis et officia qui ","completed":false,"display_name":"quis ut nam facilis et officia qui "},{"id":3,"title":"fugiat veniam minus","completed":false,"display_name":"fugiat veniam minus"},{"id":4,"title":"et porro tempora","completed":true,"display_name":"et porro tempora"},{"id":5,"title":"laboriosam mollitia et enim quasi adipisci quia provident illum","completed":false,"display_name":"laboriosam mollitia et enim quasi adipisci quia provident illum"},{"id":6,"title":"qui ullam ratione quibusdam voluptatem quia omnis","completed":false,"display_name":"qui ullam ratione quibusdam voluptatem quia omnis"},{"id":7,"title":"illo expedita consequatur quia in","completed":false,"display_name":"illo expedita consequatur quia in"},{"id":8,"title":"quo adipisci enim quam ut ab","completed":true,"display_name":"quo adipisci enim quam ut ab"},{"id":9,"title":"molestiae perspiciatis ipsa","completed":false,"display_name":"molestiae perspiciatis ipsa"},{"id":10,"title":"illo est ratione doloremque quia maiores aut","completed":true,"display_name":"illo est ratione doloremque quia maiores aut"}]`'>
    <!-- <WeList addItemTitle="'Add new item to list'" renderListItems="''" hasDefault="'multiple'" defaultValue="'Something'"> -->
        <t t-set-slot="title">A wonderful WeList</t>
    </WeList>
    <WeMany2one title="'Menu'"
                setPageTemplate="''"
                model="'website.page'"
                noPreview="'true'"
                domain='`[["is_published", "=", true]]`'
                createMethod="'createPage'"/>
    <WeMany2many noPreview="'true'"
            model="'website.menu'"
            m2oField="'group_ids'"
            setGroups="''"
            createMethod="'createGroup'">
        <t t-set-slot="title">Menu groups</t>
    </WeMany2many>
</t>

<t t-name="web_editor.container_width">
    <WeButtonGroup title.translate="Content Width">
        <WeButton selectClass="'o_container_small'"
                  tooltip.translate="Small"
                  img="'/website/static/src/img/snippets_options/content_width_small.svg'"/>
        <WeButton selectClass="'container'"
                  img="'/website/static/src/img/snippets_options/content_width_normal.svg'"
                  tooltip.translate="Regular"/>
        <WeButton selectClass="'container-fluid'"
                  img="'/website/static/src/img/snippets_options/content_width_full.svg'"
                  tooltip.translate="Full"/>
    </WeButtonGroup>
</t>

<t t-name="web_editor.WeTitle">
    <we-title t-att-class="props.class" t-att-style="props.style"
                t-att-data-tooltip="props.tooltip">
        <t t-if="props.slots?.title" t-slot="title"/>
        <t t-else="" t-out="props.title"/>
    </we-title>
</t>

<t t-name="web_editor.WeRow">
    <we-row t-att-class="{'d-none': !this.state.show, [props.class]: true}" t-att-data-tooltip="props.tooltip">
        <WeTitle t-if="props.slots?.title || props.title"
                title="props.title" slots="{title: props.slots?.title}"
                style="props.fontFamily ? `font-family: ${props.fontFamily}` : ''"/>
        <div>
            <t t-slot="default"/>
        </div>
    </we-row>
</t>

<t t-name="web_editor.WeButton">
    <!-- 
         TODO: @owl-options tooltips are not automatically translated. To Check
        How we can solve that issue.
    -->
    <we-button t-ref="text-content"
               t-on-mouseenter="this._onUserValuePreview"
               t-on-mouseleave="this._onUserValueReset"
               t-on-click="this._onButtonClick" class="o_we_user_value_widget"
               t-att-data-tooltip="props.tooltip"
               t-att-class="getAllClasses()"
               t-att="getAllDataAttributes()">
            <div>
                <t t-if="this.img">
                    <img t-att-src="this.img"/>
                </t>
                <t t-if="this.props.icon">
                    <i t-attf-class="fa {{ this.props.icon }}"/>
                </t>
                <t t-if="this.svg">
                    <t t-out="this.svg"/>
                </t>
                <t t-slot="default"/>
            </div>
    </we-button>
</t>
<t t-name="web_editor.WeCheckbox">
    <we-button t-ref="text-content"
               t-on-mouseenter="this._onUserValuePreview"
               t-on-mouseleave="this._onUserValueReset"
               t-on-click="this._onButtonClick" class="o_we_user_value_widget o_we_checkbox_wrapper"
               t-att-data-tooltip="props.tooltip"
               t-att-class="getAllClasses()"
               t-att="getAllDataAttributes()">
            <WeTitle t-if="props.slots?.title || props.title"
                    title="props.title" slots="{title: props.slots?.title}"/>
            <div>
                <we-checkbox/>
            </div>
    </we-button>
</t>
<t t-name="web_editor.WeSelect">
    <we-select class="o_we_user_value_widget" t-att-class="getAllClasses()" t-on-click="_onClick"
               t-att="getAllDataAttributes()">
        <WeTitle t-if="props.slots?.title || props.title"
               title="props.title" slots="{title: props.slots?.title}"/>
        <div>
            <t t-if="props.slots?.toggler">
                <we-toggler t-att-class="{ 'active': state.opened }">
                    <t t-slot="toggler"/>
                </we-toggler>
            </t>
            <t t-else="">
                <we-toggler t-att-class="{ 'active': state.opened }">
                    <t t-if="state.toggler.textContent" t-out="state.toggler.textContent"/>
                    <t t-if="state.toggler.faIcon">
                        <i t-att-class="`fa ${state.toggler.faIcon}`"/>
                    </t>
                    <t t-if="state.toggler.imgSrc">
                        <img t-att-src="state.toggler.imgSrc"/>
                    </t>
                </we-toggler>
            </t>
            <we-selection-items t-ref="menu">
                <t t-slot="default"/>
            </we-selection-items>
            <span class="o_we_dropdown_caret"/>
        </div>
    </we-select>
</t>
<t t-name="web_editor.WeButtonGroup">
        <we-button-group class="o_we_user_value_widget" t-att-class="getAllClasses()">
        <WeTitle t-if="props.slots?.title || props.title" tooltip="props.tooltip"
                title="props.title" slots="{title: props.slots?.title}"/>
        <div>
            <we-selection-items>
                <t t-slot="default"/>
            </we-selection-items>
        </div>
    </we-button-group>
</t>
<t t-name="web_editor.WeInput">
    <we-input class="o_we_user_value_widget" t-att-class="getAllClasses()"
              t-att-data-tooltip="props.tooltip" t-att="getAllDataAttributes()">
        <WeTitle t-if="props.slots?.title || props.title"
              title="props.title" slots="{title: props.slots?.title}"/>
        <div>
            <t t-set="isNumber" t-value="this.state._isNumeric() || !! !!this.props.hideUnit"/>
            <t t-set="showUnit" t-value="(!!this.props.unit || !!this.props.fakeUnit) and !this.props.hideUnit"/>
            <input t-ref="input" t-att-name="this.props.optionName"
                t-att-type="isNumber ? 'number' : 'text'"
                t-att-class="{'text-end': isNumber, 'text-start': !isNumber}"
                autocomplete="chrome-off"
                t-att-placeholder="this.props.placeholder"
                t-on-input="this._onInputInput"
                t-on-blur="this._onInputBlur"
                t-on-change="this._onUserValueChange"
                t-on-keydown="this._onInputKeydown"
                t-att-value="this.state.value"
            />
            <span t-if="showUnit" t-out="this.props.fakeUnit || this.props.unit"/>
        </div>
    </we-input>
</t>
<t t-name="web_editor.WeDatetime">
    <we-input class="o_we_user_value_widget o_we_large" t-att-class="getAllClasses()"
              t-att="getAllDataAttributes()">
        <WeTitle t-if="props.slots?.title || props.title"
                title="props.title" slots="{title: props.slots?.title}"/>
        <div>
            <input t-ref="input" type="text" class="datetimepicker-input mx-0 text-start"
                t-on-blur="this._onInputBlur"
                t-on-input="this._onDateInputInput"
            />
        </div>
    </we-input>
</t>
<t t-name="web_editor.WeRange">
    <we-range class="o_we_user_value_widget" t-att-class="getAllClasses()"
              t-att="getAllDataAttributes()">
        <WeTitle t-if="props.slots?.title || props.title"
                title="props.title" slots="{title: props.slots?.title}"/>
        <div>
            <!-- TODO w-100 did not exist in legacy, but output spans beyond div without it -->
            <input type="range" class="w-100" t-att-class="{o_we_inverted_range: this.inverted}"
                t-att-min="this.min"
                t-att-max="this.state.max"
                t-att-step="this.props.step"
                t-att-value="this.state.value"
                t-on-change="this._onInputChange"
                t-on-input="this._onInputInput"
            />
            <output t-if="this.props.displayRangeValue" class="ms-2" t-out="this.state.displayValue"/>
        </div>
    </we-range>
</t>
<t t-name="web_editor.WeMediapicker">
    <WeTitle t-if="props.slots?.title || props.title"
            title="props.title" slots="{title: props.slots?.title}"/>
    <we-button class="o_we_user_value_widget"
               t-on-click="this._onEditMedia"
               t-att-data-tooltip="props.tooltip"
               t-att-class="getAllClasses()">
        <div>
            <t t-if="props.buttonStyle"><i class="fa fa-fw fa-camera" alt="Add media"></i></t>
            <t t-else="">Replace</t>
        </div>
    </we-button>
</t>
<t t-name="web_editor.WeColorpicker">
    <we-select class="o_we_user_value_widget o_we_so_color_palette" t-att-class="getAllClasses()"
                t-att-data-tooltip="props.tooltip" t-on-click="this._onClick">
        <WeTitle t-if="props.slots?.title || props.title"
                title="props.title" slots="{title: props.slots?.title}"/>
        <div>
            <span class="o_we_color_preview" t-att="getPreviewAttributes()"/>
            <we-toggler t-att-class="{ 'active': state.opened }"/>
            <we-selection-items t-ref="menu">
                <div class="o_we_color_palette_wrapper" style="display: contents;">
                    <!-- Only render the ColorPalette when the toggler is active -->
                    <ColorPalette t-if="state.opened" t-props="options" selectedCC="this.state.ccValue" selectedColor="this.state.value" />
                </div>
            </we-selection-items>
            <span class="o_we_dropdown_caret"/>
        </div>
    </we-select>
</t>
<t t-name="web_editor.WeMulti">
    <we-multi class="o_we_user_value_widget" t-att-class="getAllClasses()">
        <WeTitle t-if="props.slots?.title || props.title"
                title="props.title" slots="{title: props.slots?.title}"/>
        <div>
            <t t-slot="default"/>
        </div>
    </we-multi>
</t>
<t t-name="web_editor.WeList">
    <we-list class="o_we_user_value_widget o_we_fw" t-att-class="getAllClasses()" t-on-mousedown="_onWeListMousedown">
        <WeTitle t-if="props.slots?.title || props.title"
                title="props.title" slots="{title: props.slots?.title}"/>
        <div>
            <div class="o_we_table_wrapper">
                <table t-ref="table">
                    <t t-foreach="state.listRecords" t-as="listRecord" t-key="listRecord.id">
                        <tr>
                            <td t-if="props.unsortable !== 'true'">
                                <we-button class="o_we_drag_handle o_we_link fa fa-fw fa-arrows" data-no-preview="true"/>
                            </td>
                            <td class="o_we_list_record_name">
                                <input t-att-type="props.inputType" t-att-value="listRecord.display_name || props.defaultValue"
                                    t-att-name="listRecord.id" t-att-placeholder="listRecord.placeholder"
                                    t-att="this.getInputDataAtts(listRecord)"
                                    t-on-input="_onListItemBlurInput"
                                    t-on-blur="_onListItemBlurInput"
                                    t-att-disabled="!state.isCustom"/>
                            </td>
                            <td t-if="props.hasDefault and !listRecord.notToggleable">
                                <we-button class="o_we_user_value_widget o_we_checkbox_wrapper"
                                           t-att-data-select="listRecord.id"
                                           t-att-class="{'active': state.selected.includes(listRecord.id) || listRecord.selected}"
                                           t-on-click="_onAddItemCheckboxClick">
                                    <we-checkbox/>
                                </we-button>
                            </td>
                            <td t-if="!listRecord.undeletable">
                                <we-button class="o_we_select_remove_option o_we_link o_we_text_danger fa fa-fw fa-minus"
                                           t-att-data-remove-option="listRecord.id" t-on-click="_onRemoveItemClick"/>
                            </td>
                        </tr>
                    </t>
                </table>
            </div>
            <t t-slot="createUserValue"/>
            <t t-if="!props.slots?.createUserValue">
                <we-button t-if="state.isCustom" class="o_we_list_add_optional" t-on-click="_onAddCustomItemClick">
                    <t t-out="props.addItemTitle"/>
                </we-button>
                <we-select t-else="" class="o_we_user_value_widget o_we_add_list_item" t-on-click="_onClick">
                    <div>
                        <we-toggler t-att-class="{'active': state.opened}" t-out="props.addItemTitle"/>
                        <we-selection-items>
                            <t t-set="noRecordInList" t-value="true"/>
                            <t t-foreach="state.existingRecords" t-as="record" t-key="record.id">
                                <t t-if="!state.listRecords.find(v => v.id === record.id)">
                                    <t t-set="noRecordInList" t-value="false"/>
                                    <we-button class="o_we_list_add_existing" t-att-data-add-option="record.id" data-no-preview="true" t-on-click="_onAddExistingItemClick">
                                        <div t-out="record.display_name"/>
                                    </we-button>
                                </t>
                            </t>
                            <we-title t-if="noRecordInList">No more records</we-title>
                        </we-selection-items>
                    </div>
                </we-select>
            </t>
        </div>
    </we-list>
</t>

<t t-name="web_editor.WeMany2one" t-inherit="web_editor.WeSelect" t-inherit-mode="primary">
    <!-- The component already extends WeSelect: we can't use <WeSelect> here,
        we have to xpath it. -->
    <xpath expr="//we-select" position="attributes">
        <attribute name="class" add="o_we_many2one" separator=" "/>
    </xpath>
    <xpath expr="//we-selection-items/t" position="replace">
        <div class="o_we_m2o_search">
            <t t-set="input_placeholder">Search for records</t>
            <input t-att-placeholder="input_placeholder" t-on-input="_onSearchInput" t-on-keydown="_onSearchKeydown"/>
        </div>
        <t t-foreach="state.records" t-as="record" t-key="record.id">
            <WeButton t-props="getButtonProps(record)" t-esc="record.display_name"/>
        </t>
        <t t-set="search_more_title">Search to show more records</t>
        <div t-if="state.hasMore" class="o_we_m2o_search_more" t-att-title="search_more_title" t-on-click="_onSearchMoreClick">
            Search more...
        </div>
        <t t-if="props.createMethod">
            <WeRow class="'o_we_full_row o_we_m2o_create p-1'">
                <input type="text" class="o_we_large" t-on-input="_onCreateInputInput"/>
                <WeButton class="'flex-grow-0 flex-shrink-0'" noPreview="'true'" t-props="{[props.createMethod]: ''}">
                    Create
                </WeButton>
            </WeRow>
        </t>
    </xpath>
</t>
<t t-name="web_editor.WeMany2many">
    <div class="o_we_user_value_widget o_we_m2m position-relative" t-att-class="getAllClasses()">
        <WeTitle t-if="props.slots?.title || props.title"
                title="props.title" slots="{title: props.slots?.title}"/>
        <div>
            <WeList unsortable="'true'" notEditable="'true'" allowEmpty="'true'">
                <t t-set-slot="createUserValue">
                    <WeMany2one createUserValue="'true'" t-props="state.m2oProps"/>
                </t>
            </WeList>

        </div>
    </div>
</t>
</templates>
