<?xml version="1.0" encoding="UTF-8"?>

<templates>
    <t t-name="account.DropZone">
        <div t-if="props.visible or props.rendererDraggingActive"
            t-attf-class="o_drop_area d-flex align-items-center justify-content-center flex-column"
            t-att-class="{
                'drag_to_card': props.visible,
            }"
            t-on-click="props.deactivateDrag"
            t-on-dragover.prevent="()=>{}"
            t-on-dragleave="props.hideZone"
            t-on-drop.prevent.stop="onDrop">
            <t t-if="props.dragIcon and props.dragText">
                <div t-if="props.dragIcon" class="text-align-center pe-none"><img class="img-fluid" t-att-src="props.dragIcon"/></div>
                <div t-if="props.visible" class="position-absolute upload_badge pe-none">
                    <i class="fa fa-circle fa-stack-2x text-primary"></i>
                    <i class="fa fa-upload fa-stack-1x fa-inverse"></i>
                </div>
                <div t-out="props.dragTitle" class="h3 pe-none" t-att-class="{'text-primary': props.visible}"/>
                <div class="journal_dropzone_label pe-none">
                    <span t-if="props.dragText" t-att-class="{'text-white': !props.visible, 'text-primary': props.visible}" t-out="props.dragText"/>
                </div>
            </t>
            <i t-elif="props.visible" class="fa fa-upload fa-10x pe-none"></i>
        </div>
    </t>

    <t t-name="account.AccountFileUploader">
        <div t-att-class="divClass">
            <FileUploader
                acceptedFileExtensions="props.acceptedFileExtensions"
                fileUploadClass="'account_file_uploader'"
                multiUpload="true"
                onUploaded.bind="onFileUploaded"
                onUploadComplete.bind="onUploadComplete">
                <t t-set-slot="toggler">
                    <t t-if="props.togglerTemplate" t-call="{{ props.togglerTemplate }}"/>
                    <t t-else="" t-slot="toggler"/>
                </t>
                <t t-slot="default"/>
            </FileUploader>
        </div>
    </t>

    <t t-name="account.ListRenderer" t-inherit="web.ListRenderer" t-inherit-mode="primary">
        <xpath expr="//div[@t-ref='root']" position="before">
            <AccountDropZone
                visible="dropzoneState.visible"
                hideZone="() => dropzoneState.visible = false"/>
        </xpath>
        <xpath expr="//div[@t-ref='root']" position="attributes">
            <attribute name="t-on-dragenter.stop.prevent">() => dropzoneState.visible = true</attribute>
        </xpath>
        <t t-call="web.ActionHelper" position="replace">
            <t t-if="showNoContentHelper">
                <!-- Bills -->
                <!-- Should this apply to in_refund too? Could we use another condition? -->
                <t t-if="this.env.searchModel._context?.default_move_type == 'in_invoice'">
                    <div class="o_view_nocontent">
                        <div class="o_nocontent_help">
                            <BillGuide/>
                        </div>
                    </div>
                </t>
                <!-- Invoices -->
                <t t-else="" t-call="web.ActionHelper">
                    <t t-set="noContentHelp" t-value="props.noContentHelp"/>
                </t>
            </t>
        </t>
    </t>

    <t t-name="account.BillGuide">
        <div class="d-flex flex-row bill_guide_container my-3">
            <div class="bill_guide_left flex-shrink-0 w-50">
                <div class="text-center">
                    <img class="img-fluid" src="/web/static/img/folder.svg" alt="Drag to upload"/>
                </div>
                <div class="text-center mt-2">
                    <!-- <button type="object" name="action_create_vendor_bill" class="btn btn-primary" journal_type="purchase" groups="account.group_account_invoice">
                        <span>Upload</span>
                    </button> -->
                    <!-- <widget name="account_file_uploader" btnClass="btn btn-primary oe_kanban_action_button"/> -->
                    <!-- <t t-call="account.AccountViewUploadButton"/> -->
                    <AccountFileUploader divClass="'d-inline'" record="this.props.record">
                        <t t-set-slot="toggler">
                            <button type="button" class="btn btn-primary o_button_upload_bill">
                                Upload
                            </button>
                        </t>
                    </AccountFileUploader>
                    or
                    <span class="account_drag_drop_btn border rounded oe_kanban_action_button pe-none">Drag &amp; drop here</span>
                    <div class="">or
                        <a href="#" type="object" name="action_create_vendor_bill" journal_type="purchase" groups="account.group_account_invoice" t-on-click="() => this.handleButtonClick('action_create_vendor_bill')">
                            <span>try our sample</span>
                        </a>
                    </div>
                </div>
            </div>
            <div class="separator_wrapper d-flex justify-content-center flex-shrink-1">
                <div class="word-separator d-flex flex-column align-items-center">
                    <div class="vertical-line border-start flex-grow-1 mt-2"/>
                    <div class="m-2">
                        or
                    </div>
                    <div class="vertical-line border-start flex-grow-1 mb-2"/>
                </div>
            </div>
            <div class="bill_guide_right flex-shrink-0 w-50">
                <div t-if="alias">
                    <div class="text-center">
                        <img class="img-fluid" src="/account/static/src/img/Bill.svg" alt="Email bills"/>
                    </div>
                    <div class="text-center mt-2">
                        Send a bill to <a t-attf-href="mailto:{{alias}}" t-out="alias"></a>
                    </div>
                </div>
                <div class="d-flex h-100 align-items-center justify-content-center" t-else="">
                    <a href="#" type="object" class="o_invoice_new" t-on-click="() => this.handleButtonClick('action_create_new')" groups="account.group_account_invoice">Create bill manually</a>
                </div>
            </div>
        </div>
    </t>

    <t t-name="account.KanbanRenderer" t-inherit="web.KanbanRenderer" t-inherit-mode="primary">
        <xpath expr="//div[@t-ref='root']" position="before">
            <AccountDropZone
                visible="dropzoneState.visible"
                hideZone="() => dropzoneState.visible = false"/>
        </xpath>
        <xpath expr="//div[@t-ref='root']" position="attributes">
            <attribute name="t-on-dragenter.stop.prevent">() => dropzoneState.visible = true</attribute>
        </xpath>
    </t>

    <t t-name="account.ListView.Buttons" t-inherit="web.ListView.Buttons" t-inherit-mode="primary">
        <xpath expr="//div[hasclass('o_list_buttons')]" position="inside">
            <t t-call="account.AccountViewUploadButton"/>
        </xpath>
    </t>

    <t t-name="account.KanbanView.Buttons" t-inherit="web.KanbanView.Buttons" t-inherit-mode="primary">
        <xpath expr="//div[hasclass('o_cp_buttons')]" position="inside">
            <t t-call="account.AccountViewUploadButton"/>
        </xpath>
    </t>

    <t t-name="account.AccountViewUploadButton">
        <!-- No record is available so rely on the action context to contain the default_move_type -->
        <AccountFileUploader>
            <t t-set-slot="toggler">
                <button type="button" class="btn btn-secondary o_button_upload_bill">
                    Upload
                </button>
            </t>
        </AccountFileUploader>
    </t>

    <t t-name="account.DashboardKanbanRenderer" t-inherit="web.KanbanRenderer" t-inherit-mode="primary">
        <xpath expr="//div[@t-ref='root']" position="attributes">
            <attribute name="t-on-dragenter.prevent">(ev) =&gt; this.kanbanDragEnter(ev)</attribute>
            <attribute name="t-on-dragleave">(ev) =&gt; this.kanbanDragLeave(ev)</attribute>
            <attribute name="t-on-drop">kanbanDragDrop</attribute>
        </xpath>
        <xpath expr="//t[@t-else='']/KanbanRecord" position="attributes">
            <attribute name="rendererDraggingActive">draggingState.draggingActive</attribute>
            <attribute name="stopDragFn">() =&gt; this.disableDragging()</attribute>
        </xpath>
    </t>

    <t t-name="account.DashboardKanbanRecord">
        <div
            role="article"
            t-att-class="getRecordClasses()"
            t-att-data-id="props.canResequence and props.record.id"
            t-att-tabindex="props.record.model.useSampleModel ? -1 : 0"
            t-on-click="onGlobalClick"
            t-on-dragenter.stop.prevent="() => dropzoneState.visible = true"
            t-ref="root">
            <AccountFileUploader record="props.record">
                <t t-set-slot="default">
                    <AccountDropZone t-props="dropzoneProps"/>
                    <t t-call="{{ templates[this.constructor.KANBAN_BOX_ATTRIBUTE] }}" t-call-context="renderingContext"/>
                </t>
            </AccountFileUploader>
            <t t-call="{{ this.constructor.menuTemplate }}"/>
        </div>
    </t>

    <t t-name="account.JournalUploadLink">
        <div t-att-class="props.btnClass" groups="account.group_account_invoice">
            <a href="#" t-out="props.linkText"/>
        </div>
    </t>

</templates>
