{"version":3,"file":"index.js","mappings":"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","sources":["webpack://CssSelectorGenerator/webpack/universalModuleDefinition","webpack://CssSelectorGenerator/webpack/bootstrap","webpack://CssSelectorGenerator/./temp/types.js","webpack://CssSelectorGenerator/webpack/runtime/define property getters","webpack://CssSelectorGenerator/webpack/runtime/hasOwnProperty shorthand","webpack://CssSelectorGenerator/webpack/runtime/make namespace object","webpack://CssSelectorGenerator/./temp/utilities-iselement.js","webpack://CssSelectorGenerator/./temp/utilities-messages.js","webpack://CssSelectorGenerator/./temp/utilities-options.js","webpack://CssSelectorGenerator/./temp/utilities-data.js","webpack://CssSelectorGenerator/./temp/utilities-dom.js","webpack://CssSelectorGenerator/./temp/constants.js","webpack://CssSelectorGenerator/./temp/selector-attribute.js","webpack://CssSelectorGenerator/./temp/selector-class.js","webpack://CssSelectorGenerator/./temp/selector-id.js","webpack://CssSelectorGenerator/./temp/selector-nth-child.js","webpack://CssSelectorGenerator/./temp/selector-tag.js","webpack://CssSelectorGenerator/./temp/selector-nth-of-type.js","webpack://CssSelectorGenerator/./temp/utilities-powerset.js","webpack://CssSelectorGenerator/./temp/utilities-selectors.js","webpack://CssSelectorGenerator/./temp/utilities-cartesian.js","webpack://CssSelectorGenerator/./temp/utilities-element-data.js","webpack://CssSelectorGenerator/./temp/selector-fallback.js","webpack://CssSelectorGenerator/./temp/index.js","webpack://CssSelectorGenerator/./temp/utilities-typescript.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CssSelectorGenerator\"] = factory();\n\telse\n\t\troot[\"CssSelectorGenerator\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","export var OPERATOR;\n(function (OPERATOR) {\n    OPERATOR[\"NONE\"] = \"none\";\n    OPERATOR[\"DESCENDANT\"] = \"descendant\";\n    OPERATOR[\"CHILD\"] = \"child\";\n})(OPERATOR || (OPERATOR = {}));\nexport var CssSelectorType;\n(function (CssSelectorType) {\n    CssSelectorType[\"id\"] = \"id\";\n    CssSelectorType[\"class\"] = \"class\";\n    CssSelectorType[\"tag\"] = \"tag\";\n    CssSelectorType[\"attribute\"] = \"attribute\";\n    CssSelectorType[\"nthchild\"] = \"nthchild\";\n    CssSelectorType[\"nthoftype\"] = \"nthoftype\";\n})(CssSelectorType || (CssSelectorType = {}));\n//# sourceMappingURL=types.js.map","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Guard function that checks if provided `input` is an Element.\n */\nexport function isElement(input) {\n    return input && input instanceof Element;\n}\n//# sourceMappingURL=utilities-iselement.js.map","const libraryName = 'CssSelectorGenerator';\n/**\n * Convenient wrapper for `console.warn` using consistent formatting.\n */\nexport function showWarning(id = 'unknown problem', ...args) {\n    // eslint-disable-next-line no-console\n    console.warn(`${libraryName}: ${id}`, ...args);\n}\n//# sourceMappingURL=utilities-messages.js.map","import { CssSelectorType, } from './types.js';\nimport { isEnumValue } from './utilities-typescript.js';\nimport { showWarning } from './utilities-messages.js';\nexport const DEFAULT_OPTIONS = {\n    selectors: [\n        CssSelectorType.id,\n        CssSelectorType.class,\n        CssSelectorType.tag,\n        CssSelectorType.attribute,\n    ],\n    // if set to true, always include tag name\n    includeTag: false,\n    whitelist: [],\n    blacklist: [],\n    combineWithinSelector: true,\n    combineBetweenSelectors: true,\n    root: null,\n    maxCombinations: Number.POSITIVE_INFINITY,\n    maxCandidates: Number.POSITIVE_INFINITY,\n};\n/**\n * Makes sure returned value is a list containing only valid selector types.\n * @param input\n */\nexport function sanitizeSelectorTypes(input) {\n    if (!Array.isArray(input)) {\n        return [];\n    }\n    return input.filter((item) => isEnumValue(CssSelectorType, item));\n}\n/**\n * Checks whether provided value is of type RegExp.\n */\nexport function isRegExp(input) {\n    return input instanceof RegExp;\n}\n/**\n * Checks whether provided value is usable in whitelist or blacklist.\n * @param input\n */\nexport function isCssSelectorMatch(input) {\n    return ['string', 'function'].includes(typeof input) || isRegExp(input);\n}\n/**\n * Converts input to a list of valid values for whitelist or blacklist.\n */\nexport function sanitizeCssSelectorMatchList(input) {\n    if (!Array.isArray(input)) {\n        return [];\n    }\n    return input.filter(isCssSelectorMatch);\n}\n/**\n * Checks whether provided value is valid Node.\n */\nexport function isNode(input) {\n    return input instanceof Node;\n}\n/**\n * Checks whether provided value is valid ParentNode.\n */\nexport function isParentNode(input) {\n    const validNodeTypes = [\n        Node.DOCUMENT_NODE,\n        Node.DOCUMENT_FRAGMENT_NODE,\n        Node.ELEMENT_NODE,\n    ];\n    return isNode(input) && validNodeTypes.includes(input.nodeType);\n}\n/**\n * Makes sure that the root node in options is valid.\n */\nexport function sanitizeRoot(input, element) {\n    if (isParentNode(input)) {\n        if (!input.contains(element)) {\n            // eslint-disable-next-line max-len\n            showWarning('element root mismatch', 'Provided root does not contain the element. This will most likely result in producing a fallback selector using element\\'s real root node. If you plan to use the selector using provided root (e.g. `root.querySelector`), it will nto work as intended.');\n        }\n        return input;\n    }\n    const rootNode = element.getRootNode({ composed: false });\n    if (isParentNode(rootNode)) {\n        if (rootNode !== document) {\n            // eslint-disable-next-line max-len\n            showWarning('shadow root inferred', 'You did not provide a root and the element is a child of Shadow DOM. This will produce a selector using ShadowRoot as a root. If you plan to use the selector using document as a root (e.g. `document.querySelector`), it will not work as intended.');\n        }\n        return rootNode;\n    }\n    return element.ownerDocument.querySelector(':root');\n}\n/**\n * Makes sure that the output is a number, usable as `maxResults` option in\n * powerset generator.\n */\nexport function sanitizeMaxNumber(input) {\n    return typeof input === 'number' ? input : Number.POSITIVE_INFINITY;\n}\n/**\n * Makes sure the options object contains all required keys.\n */\nexport function sanitizeOptions(element, custom_options = {}) {\n    const options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), custom_options);\n    return {\n        selectors: sanitizeSelectorTypes(options.selectors),\n        whitelist: sanitizeCssSelectorMatchList(options.whitelist),\n        blacklist: sanitizeCssSelectorMatchList(options.blacklist),\n        root: sanitizeRoot(options.root, element),\n        combineWithinSelector: !!options.combineWithinSelector,\n        combineBetweenSelectors: !!options.combineBetweenSelectors,\n        includeTag: !!options.includeTag,\n        maxCombinations: sanitizeMaxNumber(options.maxCombinations),\n        maxCandidates: sanitizeMaxNumber(options.maxCandidates),\n    };\n}\n//# sourceMappingURL=utilities-options.js.map","import { isRegExp } from './utilities-options.js';\nimport { showWarning } from './utilities-messages.js';\n/**\n * Creates array containing only items included in all input arrays.\n */\nexport function getIntersection(items = []) {\n    const [firstItem = [], ...otherItems] = items;\n    if (otherItems.length === 0) {\n        return firstItem;\n    }\n    return (otherItems).reduce((accumulator, currentValue) => {\n        return accumulator.filter((item) => currentValue.includes(item));\n    }, firstItem);\n}\n/**\n * Converts array of arrays into a flat array.\n */\nexport function flattenArray(input) {\n    return [].concat(...input);\n}\n/**\n * Convert string that can contain wildcards (asterisks) to RegExp source.\n */\nexport function wildcardToRegExp(input) {\n    return input\n        // convert all special characters used by RegExp, except an asterisk\n        .replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n        // convert asterisk to pattern that matches anything\n        .replace(/\\*/g, '.+');\n}\n/**\n * Creates function that will test list of provided matchers against input.\n * Used for white/blacklist functionality.\n */\nexport function createPatternMatcher(list) {\n    const matchFunctions = list.map((item) => {\n        if (isRegExp(item)) {\n            return (input) => item.test(input);\n        }\n        if (typeof item === 'function') {\n            return (input) => {\n                const result = item(input);\n                if (typeof result !== 'boolean') {\n                    // eslint-disable-next-line max-len\n                    showWarning('pattern matcher function invalid', 'Provided pattern matching function does not return boolean. It\\'s result will be ignored.', item);\n                    return false;\n                }\n                return result;\n            };\n        }\n        if (typeof item === 'string') {\n            const re = new RegExp('^' + wildcardToRegExp(item) + '$');\n            return (input) => re.test(input);\n        }\n        // eslint-disable-next-line max-len\n        showWarning('pattern matcher invalid', 'Pattern matching only accepts strings, regular expressions and/or functions. This item is invalid and will be ignored.', item);\n        return () => false;\n    });\n    return (input) => matchFunctions.some((matchFunction) => matchFunction(input));\n}\n//# sourceMappingURL=utilities-data.js.map","import { isElement } from './utilities-iselement.js';\nimport { getIntersection } from './utilities-data.js';\nimport { sanitizeRoot } from './utilities-options.js';\n/**\n * Check whether element is matched uniquely by selector.\n */\nexport function testSelector(elements, selector, root) {\n    const result = Array.from(sanitizeRoot(root, elements[0])\n        .querySelectorAll(selector));\n    return (result.length === elements.length\n        && elements.every((element) => result.includes(element)));\n}\n/**\n * Test whether selector targets element. It does not have to be a unique match.\n */\nexport function testMultiSelector(element, selector, root) {\n    const result = Array.from(sanitizeRoot(root, element)\n        .querySelectorAll(selector));\n    return result.includes(element);\n}\n/**\n * Find all parents of a single element.\n */\nexport function getElementParents(element, root) {\n    root = root !== null && root !== void 0 ? root : getRootNode(element);\n    const result = [];\n    let parent = element;\n    while (isElement(parent) && parent !== root) {\n        result.push(parent);\n        parent = parent.parentElement;\n    }\n    return result;\n}\n/**\n * Find all common parents of elements.\n */\nexport function getParents(elements, root) {\n    return getIntersection(elements.map((element) => getElementParents(element, root)));\n}\n/**\n * Returns root node for given element. This needs to be used because of document-less environments, e.g. jsdom.\n */\nexport function getRootNode(element) {\n    return element.ownerDocument.querySelector(':root');\n}\n//# sourceMappingURL=utilities-dom.js.map","import { CssSelectorType, OPERATOR } from './types.js';\nexport const NONE_OPERATOR = '';\nexport const DESCENDANT_OPERATOR = ' > ';\nexport const CHILD_OPERATOR = ' ';\nexport const OPERATOR_DATA = {\n    [OPERATOR.NONE]: {\n        type: OPERATOR.NONE,\n        value: NONE_OPERATOR\n    },\n    [OPERATOR.DESCENDANT]: {\n        type: OPERATOR.DESCENDANT,\n        value: DESCENDANT_OPERATOR\n    },\n    [OPERATOR.CHILD]: {\n        type: OPERATOR.CHILD,\n        value: CHILD_OPERATOR\n    }\n};\nexport const SELECTOR_SEPARATOR = ', ';\n// RegExp that will match invalid patterns that can be used in ID attribute.\nexport const INVALID_ID_RE = new RegExp([\n    '^$',\n    '\\\\s', // contains whitespace\n].join('|'));\n// RegExp that will match invalid patterns that can be used in class attribute.\nexport const INVALID_CLASS_RE = new RegExp([\n    '^$', // empty or not set\n].join('|'));\n// Order in which a combined selector is constructed.\nexport const SELECTOR_PATTERN = [\n    CssSelectorType.nthoftype,\n    CssSelectorType.tag,\n    CssSelectorType.id,\n    CssSelectorType.class,\n    CssSelectorType.attribute,\n    CssSelectorType.nthchild\n];\n//# sourceMappingURL=constants.js.map","import { sanitizeSelectorItem } from './utilities-selectors.js';\nimport { createPatternMatcher, getIntersection } from './utilities-data.js';\n// List of attributes to be ignored. These are handled by different selector types.\nexport const attributeBlacklistMatch = createPatternMatcher([\n    'class',\n    'id',\n    // Angular attributes\n    'ng-*',\n]);\n/**\n * Get simplified attribute selector for an element.\n */\nexport function attributeNodeToSimplifiedSelector({ nodeName, }) {\n    return `[${nodeName}]`;\n}\n/**\n * Get attribute selector for an element.\n */\nexport function attributeNodeToSelector({ nodeName, nodeValue, }) {\n    const selector = `[${nodeName}='${sanitizeSelectorItem(nodeValue)}']`;\n    return selector;\n}\n/**\n * Checks whether attribute should be used as a selector.\n */\nexport function isValidAttributeNode({ nodeName }, element) {\n    // form input value should not be used as a selector\n    const tagName = element.tagName.toLowerCase();\n    if (['input', 'option'].includes(tagName) && nodeName === 'value') {\n        return false;\n    }\n    return !attributeBlacklistMatch(nodeName);\n}\n/**\n * Get attribute selectors for an element.\n */\nexport function getElementAttributeSelectors(element) {\n    const validAttributes = Array.from(element.attributes)\n        .filter((attributeNode) => isValidAttributeNode(attributeNode, element));\n    return [\n        ...validAttributes.map(attributeNodeToSimplifiedSelector),\n        ...validAttributes.map(attributeNodeToSelector),\n    ];\n}\n/**\n * Get attribute selectors matching all elements.\n */\nexport function getAttributeSelectors(elements) {\n    const elementSelectors = elements.map(getElementAttributeSelectors);\n    return getIntersection(elementSelectors);\n}\n//# sourceMappingURL=selector-attribute.js.map","import { sanitizeSelectorItem } from './utilities-selectors.js';\nimport { INVALID_CLASS_RE } from './constants.js';\nimport { getIntersection } from './utilities-data.js';\n/**\n * Get class selectors for an element.\n */\nexport function getElementClassSelectors(element) {\n    return (element.getAttribute('class') || '')\n        .trim()\n        .split(/\\s+/)\n        .filter((item) => !INVALID_CLASS_RE.test(item))\n        .map((item) => `.${sanitizeSelectorItem(item)}`);\n}\n/**\n * Get class selectors matching all elements.\n */\nexport function getClassSelectors(elements) {\n    const elementSelectors = elements.map(getElementClassSelectors);\n    return getIntersection(elementSelectors);\n}\n//# sourceMappingURL=selector-class.js.map","import { sanitizeSelectorItem } from './utilities-selectors.js';\nimport { INVALID_ID_RE } from './constants.js';\nimport { testSelector } from './utilities-dom.js';\n/**\n * Get ID selector for an element.\n * */\nexport function getElementIdSelectors(element) {\n    const id = element.getAttribute('id') || '';\n    const selector = `#${sanitizeSelectorItem(id)}`;\n    const rootNode = element.getRootNode({ composed: false });\n    return (!INVALID_ID_RE.test(id)\n        && testSelector([element], selector, rootNode))\n        ? [selector]\n        : [];\n}\n/**\n * Get ID selector for an element.\n */\nexport function getIdSelector(elements) {\n    return (elements.length === 0 || elements.length > 1)\n        ? []\n        : getElementIdSelectors(elements[0]);\n}\n//# sourceMappingURL=selector-id.js.map","import { isElement } from './utilities-iselement.js';\nimport { getIntersection } from './utilities-data.js';\n/**\n * Get nth-child selector for an element.\n */\nexport function getElementNthChildSelector(element) {\n    const parent = element.parentNode;\n    if (parent) {\n        const siblings = Array.from(parent.childNodes).filter(isElement);\n        const elementIndex = siblings.indexOf(element);\n        if (elementIndex > -1) {\n            return [`:nth-child(${elementIndex + 1})`];\n        }\n    }\n    return [];\n}\n/**\n * Get nth-child selector matching all elements.\n */\nexport function getNthChildSelector(elements) {\n    return getIntersection(elements.map(getElementNthChildSelector));\n}\n//# sourceMappingURL=selector-nth-child.js.map","import { sanitizeSelectorItem } from './utilities-selectors.js';\nimport { flattenArray } from './utilities-data.js';\n/**\n * Get tag selector for an element.\n */\nexport function getElementTagSelectors(element) {\n    return [\n        sanitizeSelectorItem(element.tagName.toLowerCase()),\n    ];\n}\n/**\n * Get tag selector for list of elements.\n */\nexport function getTagSelector(elements) {\n    const selectors = [\n        ...new Set(flattenArray(elements.map(getElementTagSelectors))),\n    ];\n    return (selectors.length === 0 || selectors.length > 1) ? [] : [selectors[0]];\n}\n//# sourceMappingURL=selector-tag.js.map","import { getTagSelector } from './selector-tag.js';\nimport { getIntersection } from './utilities-data.js';\n/**\n * Get nth-of-type selector for an element.\n */\nexport function getElementNthOfTypeSelector(element) {\n    const tag = getTagSelector([element])[0];\n    const parentElement = element.parentElement;\n    if (parentElement) {\n        const siblings = Array\n            .from(parentElement.children)\n            .filter((element) => element.tagName.toLowerCase() === tag);\n        const elementIndex = siblings.indexOf(element);\n        if (elementIndex > -1) {\n            return [`${tag}:nth-of-type(${elementIndex + 1})`];\n        }\n    }\n    return [];\n}\n/**\n * Get Nth-of-type selector matching all elements.\n */\nexport function getNthOfTypeSelector(elements) {\n    return getIntersection(elements.map(getElementNthOfTypeSelector));\n}\n//# sourceMappingURL=selector-nth-of-type.js.map","/**\n * Generates power set of input items.\n */\nexport function getPowerSet(input = [], { maxResults = Number.POSITIVE_INFINITY } = {}) {\n    const result = [];\n    let resultCounter = 0;\n    let offsets = generateOffsets(1);\n    while ((offsets.length <= input.length) && (resultCounter < maxResults)) {\n        resultCounter += 1;\n        result.push(offsets.map((offset) => input[offset]));\n        offsets = bumpOffsets(offsets, input.length - 1);\n    }\n    return result;\n}\n/**\n * Helper function used by `getPowerSet`. Updates internal pointers.\n */\nfunction bumpOffsets(offsets = [], maxValue = 0) {\n    const size = offsets.length;\n    if (size === 0) {\n        return [];\n    }\n    const result = [...offsets];\n    result[size - 1] += 1;\n    for (let index = size - 1; index >= 0; index--) {\n        if (result[index] > maxValue) {\n            if (index === 0) {\n                return generateOffsets(size + 1);\n            }\n            else {\n                result[index - 1]++;\n                result[index] = result[index - 1] + 1;\n            }\n        }\n    }\n    if (result[size - 1] > maxValue) {\n        return generateOffsets(size + 1);\n    }\n    return result;\n}\n/**\n * Generates array of size N, filled with numbers sequence starting from 0.\n */\nfunction generateOffsets(size = 1) {\n    return Array.from(Array(size).keys());\n}\n//# sourceMappingURL=utilities-powerset.js.map","import { CHILD_OPERATOR, DESCENDANT_OPERATOR, SELECTOR_PATTERN, } from './constants.js';\nimport { getAttributeSelectors, getElementAttributeSelectors, } from './selector-attribute.js';\nimport { getClassSelectors, getElementClassSelectors } from './selector-class.js';\nimport { getElementIdSelectors, getIdSelector } from './selector-id.js';\nimport { getElementNthChildSelector, getNthChildSelector, } from './selector-nth-child.js';\nimport { getElementNthOfTypeSelector, getNthOfTypeSelector, } from './selector-nth-of-type.js';\nimport { getElementTagSelectors, getTagSelector } from './selector-tag.js';\nimport { createPatternMatcher, flattenArray } from './utilities-data.js';\nimport { getParents, testSelector } from './utilities-dom.js';\nimport { CssSelectorType, } from './types.js';\nimport { isElement } from './utilities-iselement.js';\nimport { getPowerSet } from './utilities-powerset.js';\nimport { getCartesianProduct } from './utilities-cartesian.js';\nexport const ESCAPED_COLON = ':'\n    .charCodeAt(0)\n    .toString(16)\n    .toUpperCase();\n// Square brackets need to be escaped, but eslint has a problem with that.\n/* eslint-disable-next-line no-useless-escape */\nexport const SPECIAL_CHARACTERS_RE = /[ !\"#$%&'()\\[\\]{|}<>*+,./;=?@^`~\\\\]/;\n/**\n * Escapes special characters used by CSS selector items.\n */\nexport function sanitizeSelectorItem(input = '') {\n    var _a, _b;\n    return (_b = (_a = CSS === null || CSS === void 0 ? void 0 : CSS.escape) === null || _a === void 0 ? void 0 : _a.call(CSS, input)) !== null && _b !== void 0 ? _b : legacySanitizeSelectorItem(input);\n}\n/**\n * Legacy version of escaping utility, originally used for IE11-. Should\n * probably be replaced by a polyfill:\n * https://github.com/mathiasbynens/CSS.escape\n */\nexport function legacySanitizeSelectorItem(input = '') {\n    return input.split('')\n        .map((character) => {\n        if (character === ':') {\n            return `\\\\${ESCAPED_COLON} `;\n        }\n        if (SPECIAL_CHARACTERS_RE.test(character)) {\n            return `\\\\${character}`;\n        }\n        return escape(character)\n            .replace(/%/g, '\\\\');\n    })\n        .join('');\n}\nexport const SELECTOR_TYPE_GETTERS = {\n    tag: getTagSelector,\n    id: getIdSelector,\n    class: getClassSelectors,\n    attribute: getAttributeSelectors,\n    nthchild: getNthChildSelector,\n    nthoftype: getNthOfTypeSelector,\n};\nexport const ELEMENT_SELECTOR_TYPE_GETTERS = {\n    tag: getElementTagSelectors,\n    id: getElementIdSelectors,\n    class: getElementClassSelectors,\n    attribute: getElementAttributeSelectors,\n    nthchild: getElementNthChildSelector,\n    nthoftype: getElementNthOfTypeSelector,\n};\n/**\n * Creates selector of given type for single element.\n */\nexport function getElementSelectorsByType(element, selectorType) {\n    return ELEMENT_SELECTOR_TYPE_GETTERS[selectorType](element);\n}\n/**\n * Returns list of selectors of given type for the element.\n */\nexport function getSelectorsByType(elements, selector_type) {\n    var _a;\n    const getter = ((_a = SELECTOR_TYPE_GETTERS[selector_type]) !== null && _a !== void 0 ? _a : (() => []));\n    return getter(elements);\n}\n/**\n * Remove blacklisted selectors from list.\n */\nexport function filterSelectors(list = [], matchBlacklist, matchWhitelist) {\n    return list.filter((item) => (matchWhitelist(item)\n        || !matchBlacklist(item)));\n}\n/**\n * Prioritise whitelisted selectors in list.\n */\nexport function orderSelectors(list = [], matchWhitelist) {\n    return list.sort((a, b) => {\n        const a_is_whitelisted = matchWhitelist(a);\n        const b_is_whitelisted = matchWhitelist(b);\n        if (a_is_whitelisted && !b_is_whitelisted) {\n            return -1;\n        }\n        if (!a_is_whitelisted && b_is_whitelisted) {\n            return 1;\n        }\n        return 0;\n    });\n}\n/**\n * Returns list of unique selectors applicable to given element.\n */\nexport function getAllSelectors(elements, root, options) {\n    const selectors_list = getSelectorsList(elements, options);\n    const type_combinations = getTypeCombinations(selectors_list, options);\n    const all_selectors = flattenArray(type_combinations);\n    return [...new Set(all_selectors)];\n}\n/**\n * Creates object containing all selector types and their potential values.\n */\nexport function getSelectorsList(elements, options) {\n    const { blacklist, whitelist, combineWithinSelector, maxCombinations, } = options;\n    const matchBlacklist = createPatternMatcher(blacklist);\n    const matchWhitelist = createPatternMatcher(whitelist);\n    const reducer = (data, selector_type) => {\n        const selectors_by_type = getSelectorsByType(elements, selector_type);\n        const filtered_selectors = filterSelectors(selectors_by_type, matchBlacklist, matchWhitelist);\n        const found_selectors = orderSelectors(filtered_selectors, matchWhitelist);\n        data[selector_type] = combineWithinSelector\n            ? getPowerSet(found_selectors, { maxResults: maxCombinations })\n            : found_selectors.map((item) => [item]);\n        return data;\n    };\n    return getSelectorsToGet(options)\n        .reduce(reducer, {});\n}\n/**\n * Creates list of selector types that we will need to generate the selector.\n */\nexport function getSelectorsToGet(options) {\n    const { selectors, includeTag, } = options;\n    const selectors_to_get = [].concat(selectors);\n    if (includeTag && !selectors_to_get.includes('tag')) {\n        selectors_to_get.push('tag');\n    }\n    return selectors_to_get;\n}\n/**\n * Adds \"tag\" to a list, if it does not contain it. Used to modify selectors\n * list when includeTag option is enabled to make sure all results contain the\n * TAG part.\n */\nfunction addTagTypeIfNeeded(list) {\n    return (list.includes(CssSelectorType.tag)\n        || list.includes(CssSelectorType.nthoftype))\n        ? [...list]\n        : [...list, CssSelectorType.tag];\n}\n/**\n * Generates list of possible selector type combinations.\n */\nexport function combineSelectorTypes(options) {\n    const { selectors, combineBetweenSelectors, includeTag, maxCandidates, } = options;\n    const combinations = combineBetweenSelectors\n        ? getPowerSet(selectors, { maxResults: maxCandidates })\n        : selectors.map(item => [item]);\n    return includeTag\n        ? combinations.map(addTagTypeIfNeeded)\n        : combinations;\n}\n/**\n * Generates list of combined CSS selectors.\n */\nexport function getTypeCombinations(selectors_list, options) {\n    return combineSelectorTypes(options)\n        .map((item) => {\n        return constructSelectors(item, selectors_list);\n    })\n        .filter((item) => item.length > 0);\n}\n/**\n * Generates all variations of possible selectors from provided data.\n */\nexport function constructSelectors(selector_types, selectors_by_type) {\n    const data = {};\n    selector_types.forEach((selector_type) => {\n        const selector_variants = selectors_by_type[selector_type];\n        if (selector_variants.length > 0) {\n            data[selector_type] = selector_variants;\n        }\n    });\n    const combinations = getCartesianProduct(data);\n    return combinations.map(constructSelector);\n}\n/**\n * Creates selector for given selector type. Combines several parts if needed.\n */\nexport function constructSelectorType(selector_type, selectors_data) {\n    return (selectors_data[selector_type])\n        ? selectors_data[selector_type].join('')\n        : '';\n}\n/**\n * Converts selector data object to a selector.\n */\nexport function constructSelector(selectorData = {}) {\n    const pattern = [...SELECTOR_PATTERN];\n    // selector \"nthoftype\" already contains \"tag\"\n    if (selectorData[CssSelectorType.tag]\n        && selectorData[CssSelectorType.nthoftype]) {\n        pattern.splice(pattern.indexOf(CssSelectorType.tag), 1);\n    }\n    return pattern\n        .map((type) => constructSelectorType(type, selectorData))\n        .join('');\n}\n/**\n * Generates combinations of child and descendant selectors within root\n * selector.\n */\nfunction generateCandidateCombinations(selectors, rootSelector) {\n    return [\n        ...selectors.map((selector) => rootSelector + CHILD_OPERATOR + selector),\n        ...selectors.map((selector) => rootSelector + DESCENDANT_OPERATOR + selector),\n    ];\n}\n/**\n * Generates a list of selector candidates that can potentially match target\n * element.\n */\nfunction generateCandidates(selectors, rootSelector) {\n    return rootSelector === ''\n        ? selectors\n        : generateCandidateCombinations(selectors, rootSelector);\n}\n/**\n * Tries to find an unique CSS selector for element within given parent.\n */\nexport function getSelectorWithinRoot(elements, root, rootSelector = '', options) {\n    const elementSelectors = getAllSelectors(elements, options.root, options);\n    const selectorCandidates = generateCandidates(elementSelectors, rootSelector);\n    for (const candidateSelector of selectorCandidates) {\n        if (testSelector(elements, candidateSelector, options.root)) {\n            return candidateSelector;\n        }\n    }\n    return null;\n}\n/**\n * Climbs through parents of the element and tries to find the one that is\n * identifiable by unique CSS selector.\n */\nexport function getClosestIdentifiableParent(elements, root, rootSelector = '', options) {\n    if (elements.length === 0) {\n        return null;\n    }\n    const candidatesList = [\n        (elements.length > 1) ? elements : [],\n        ...getParents(elements, root)\n            .map((element) => [element]),\n    ];\n    for (const currentElements of candidatesList) {\n        const result = getSelectorWithinRoot(currentElements, root, rootSelector, options);\n        if (result) {\n            return {\n                foundElements: currentElements,\n                selector: result,\n            };\n        }\n    }\n    return null;\n}\n/**\n * Converts input into list of elements, removing duplicates and non-elements.\n */\nexport function sanitizeSelectorNeedle(needle) {\n    const elements = (Array.isArray(needle) ? needle : [needle]).filter(isElement);\n    return [...new Set(elements)];\n}\n//# sourceMappingURL=utilities-selectors.js.map","/**\n * Generates cartesian product out of input object.\n */\nexport function getCartesianProduct(input = {}) {\n    let result = [];\n    Object.entries(input)\n        .forEach(([key, values]) => {\n        result = values.flatMap(value => {\n            if (result.length === 0) {\n                return [{ [key]: value }];\n            }\n            else {\n                return result.map(memo => (Object.assign(Object.assign({}, memo), { [key]: value })));\n            }\n        });\n    });\n    return result;\n}\n//# sourceMappingURL=utilities-cartesian.js.map","import { CssSelectorType, OPERATOR, } from './types.js';\nimport { OPERATOR_DATA, SELECTOR_PATTERN } from './constants.js';\nimport { getElementSelectorsByType } from './utilities-selectors.js';\n/**\n * Creates data describing a specific selector.\n */\nexport function createElementSelectorData(selector) {\n    return {\n        value: selector,\n        include: false,\n    };\n}\n/**\n * Creates data describing an element within CssSelector chain.\n */\nexport function createElementData(element, selectorTypes, operator = OPERATOR.NONE) {\n    const selectors = {};\n    selectorTypes.forEach((selectorType) => {\n        Reflect.set(selectors, selectorType, getElementSelectorsByType(element, selectorType)\n            .map(createElementSelectorData));\n    });\n    return {\n        element,\n        operator: OPERATOR_DATA[operator],\n        selectors,\n    };\n}\n/**\n * Constructs selector from element data.\n */\nexport function constructElementSelector({ selectors, operator }) {\n    let pattern = [...SELECTOR_PATTERN];\n    // `nthoftype` already contains tag\n    if (selectors[CssSelectorType.tag] && selectors[CssSelectorType.nthoftype]) {\n        pattern = pattern.filter((item) => item !== CssSelectorType.tag);\n    }\n    let selector = '';\n    pattern.forEach((selectorType) => {\n        const selectorsOfType = selectors[selectorType] || [];\n        selectorsOfType.forEach(({ value, include }) => {\n            if (include) {\n                selector += value;\n            }\n        });\n    });\n    return (operator.value + selector);\n}\n//# sourceMappingURL=utilities-element-data.js.map","import { getElementParents } from './utilities-dom.js';\nimport { SELECTOR_SEPARATOR } from './constants.js';\nimport { CssSelectorType, OPERATOR } from './types.js';\nimport { constructElementSelector, createElementData } from './utilities-element-data.js';\n/**\n * Creates fallback selector for single element.\n */\nexport function getElementFallbackSelector(element) {\n    const parentElements = getElementParents(element).reverse();\n    const elementsData = parentElements.map((element) => {\n        const elementData = createElementData(element, [CssSelectorType.nthchild], OPERATOR.DESCENDANT);\n        elementData.selectors.nthchild.forEach((selectorData) => {\n            selectorData.include = true;\n        });\n        return elementData;\n    });\n    return [':root', ...elementsData.map(constructElementSelector)].join('');\n}\n/**\n * Creates chain of :nth-child selectors from root to the elements.\n */\nexport function getFallbackSelector(elements) {\n    return elements.map(getElementFallbackSelector).join(SELECTOR_SEPARATOR);\n}\n//# sourceMappingURL=selector-fallback.js.map","import { getFallbackSelector } from './selector-fallback.js';\nimport { sanitizeOptions } from './utilities-options.js';\nimport { getClosestIdentifiableParent, sanitizeSelectorNeedle, } from './utilities-selectors.js';\nimport { testSelector } from './utilities-dom.js';\nimport { SELECTOR_SEPARATOR } from './constants.js';\n/**\n * Generates unique CSS selector for an element.\n */\nexport function getCssSelector(needle, custom_options = {}) {\n    const elements = sanitizeSelectorNeedle(needle);\n    const options = sanitizeOptions(elements[0], custom_options);\n    let partialSelector = '';\n    let currentRoot = options.root;\n    /**\n     * Utility function to make subsequent calls shorter.\n     */\n    function updateIdentifiableParent() {\n        return getClosestIdentifiableParent(elements, currentRoot, partialSelector, options);\n    }\n    let closestIdentifiableParent = updateIdentifiableParent();\n    while (closestIdentifiableParent) {\n        const { foundElements, selector, } = closestIdentifiableParent;\n        if (testSelector(elements, selector, options.root)) {\n            return selector;\n        }\n        currentRoot = foundElements[0];\n        partialSelector = selector;\n        closestIdentifiableParent = updateIdentifiableParent();\n    }\n    // if failed to find single selector matching all elements, try to find\n    // selector for each standalone element and join them together\n    if (elements.length > 1) {\n        return elements\n            .map((element) => getCssSelector(element, options))\n            .join(SELECTOR_SEPARATOR);\n    }\n    return getFallbackSelector(elements);\n}\nexport default getCssSelector;\n//# sourceMappingURL=index.js.map","/**\n * Checks whether value is one of the enum's values.\n */\nexport function isEnumValue(haystack, needle) {\n    return Object.values(haystack)\n        .includes(needle);\n}\n//# sourceMappingURL=utilities-typescript.js.map"],"names":["root","factory","exports","module","define","amd","self","OPERATOR","CssSelectorType","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","isElement","input","Element","showWarning","id","args","console","warn","DEFAULT_OPTIONS","selectors","tag","attribute","includeTag","whitelist","blacklist","combineWithinSelector","combineBetweenSelectors","maxCombinations","Number","POSITIVE_INFINITY","maxCandidates","isRegExp","RegExp","isCssSelectorMatch","includes","sanitizeCssSelectorMatchList","Array","isArray","filter","isParentNode","validNodeTypes","Node","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","ELEMENT_NODE","isNode","nodeType","element","contains","rootNode","getRootNode","composed","document","ownerDocument","querySelector","sanitizeMaxNumber","getIntersection","items","firstItem","otherItems","length","reduce","accumulator","currentValue","item","flattenArray","concat","createPatternMatcher","list","matchFunctions","map","test","result","re","replace","some","matchFunction","testSelector","elements","selector","from","querySelectorAll","every","getElementParents","parent","push","parentElement","getParents","OPERATOR_DATA","NONE","type","DESCENDANT","CHILD","INVALID_ID_RE","join","INVALID_CLASS_RE","SELECTOR_PATTERN","nthoftype","nthchild","attributeBlacklistMatch","attributeNodeToSimplifiedSelector","nodeName","attributeNodeToSelector","nodeValue","sanitizeSelectorItem","getElementAttributeSelectors","validAttributes","attributes","attributeNode","tagName","toLowerCase","isValidAttributeNode","getElementClassSelectors","getAttribute","trim","split","getElementIdSelectors","getElementNthChildSelector","parentNode","elementIndex","childNodes","indexOf","getElementTagSelectors","getTagSelector","Set","getElementNthOfTypeSelector","siblings","children","getPowerSet","maxResults","resultCounter","offsets","generateOffsets","offset","bumpOffsets","maxValue","size","index","keys","ESCAPED_COLON","charCodeAt","toString","toUpperCase","SPECIAL_CHARACTERS_RE","_a","_b","CSS","escape","character","legacySanitizeSelectorItem","SELECTOR_TYPE_GETTERS","class","ELEMENT_SELECTOR_TYPE_GETTERS","addTagTypeIfNeeded","constructSelector","selectorData","pattern","splice","constructSelectorType","selectors_data","selector_type","getSelectorWithinRoot","rootSelector","options","selectorCandidates","generateCandidateCombinations","generateCandidates","selectors_list","matchBlacklist","matchWhitelist","selectors_to_get","getSelectorsToGet","data","selectors_by_type","getSelectorsByType","filtered_selectors","filterSelectors","found_selectors","sort","a","b","a_is_whitelisted","b_is_whitelisted","orderSelectors","getSelectorsList","type_combinations","combinations","combineSelectorTypes","selector_types","forEach","selector_variants","entries","values","flatMap","memo","assign","getCartesianProduct","constructSelectors","getTypeCombinations","all_selectors","getAllSelectors","candidateSelector","createElementSelectorData","include","constructElementSelector","operator","selectorType","getElementFallbackSelector","reverse","elementData","selectorTypes","Reflect","set","getElementSelectorsByType","createElementData","getCssSelector","needle","custom_options","sanitizeSelectorNeedle","isEnumValue","haystack","sanitizeOptions","partialSelector","currentRoot","updateIdentifiableParent","candidatesList","currentElements","foundElements","getClosestIdentifiableParent","closestIdentifiableParent","getFallbackSelector"],"sourceRoot":""}