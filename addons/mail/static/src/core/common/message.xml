<?xml version="1.0" encoding="UTF-8" ?>
<templates xml:space="preserve">

    <t t-name="mail.Message">
        <ActionSwiper onRightSwipe="hasTouch() and isInInbox ? { action: () => this.message.setDone(), bgColor: 'bg-success', icon: 'fa-check-circle' } : undefined">
            <div class="o-mail-Message position-relative"
                t-att-class="attClass"
                role="group"
                t-att-aria-label="messageTypeText"
                t-on-click="onClick"
                t-on-mouseenter="onMouseenter"
                t-on-mouseleave="onMouseleave"
                t-ref="root"
                t-if="message.exists()"
            >
                <MessageInReply t-if="message.parentMessage" alignedRight="isAlignedRight" message="message" onClick="props.onParentMessageClick"/>
                <div class="o-mail-Message-core position-relative d-flex flex-shrink-0 pe-1" t-att-class="{ 'ms-1 ps-2': !env.inChatWindow }">
                    <div class="o-mail-Message-sidebar d-flex flex-shrink-0" t-att-class="{ 'justify-content-end': isAlignedRight, 'align-items-start justify-content-start': !isAlignedRight, 'o-small': env.inChatWindow or ui.isSmall }">
                        <div t-if="!props.squashed" class="o-mail-Message-avatarContainer position-relative" t-att-class="getAvatarContainerAttClass()">
                            <img class="o-mail-Message-avatar w-100 h-100 rounded" t-att-src="authorAvatarUrl" t-att-class="authorAvatarAttClass"/>
                        </div>
                        <t t-elif="message.isPending" t-call="mail.Message.pendingStatus"/>
                        <t t-elif="!message.is_transient">
                            <small t-if="isActive and props.showDates" class="o-mail-Message-date text-muted opacity-75 smaller mt-2">
                                <t t-esc="message.dateSimple"/>
                            </small>
                        </t>
                    </div>
                    <div class="min-w-0" t-att-class="{ 'flex-grow-1': message.composer }" t-ref="messageContent">
                        <div t-if="!props.squashed" class="o-mail-Message-header d-flex flex-wrap align-items-baseline lh-1" t-att-class="{ 'mb-1': !message.is_note }">
                            <span t-if="authorName and shouldDisplayAuthorName" class="o-mail-Message-author" t-att-class="getAuthorAttClass()">
                                <strong class="me-1 text-truncate" t-att-class="{ 'smaller': env.inChatWindow or ui.isSmall, 'small': !env.inChatWindow and !ui.isSmall }" t-esc="authorName"/>
                            </span>
                            <t t-if="!isAlignedRight" t-call="mail.Message.notification"/>
                            <small t-if="!isOriginThread and !message.is_transient and message.thread" t-on-click.prevent="openRecord" class="me-1 text-500">
                                <t t-if="message.thread.model !== 'discuss.channel'">
                                    on <a t-att-href="message.resUrl"><t t-esc="message.thread.displayName"/></a>
                                </t>
                                <t t-else="">
                                    (from <a t-att-href="message.resUrl"><t t-esc="message.thread.prefix"/><t t-esc="message.thread.displayName"/></a>)
                                </t>
                            </small>
                            <div t-if="props.message.scheduledDatetime" t-att-class="{ 'ms-2': props.isInChatWindow and isAlignedRight }" t-att-title="props.message.scheduledDateSimple">
                                <span class="text-600 cursor-pointer">
                                    <i class="fa fa-calendar-o"/>
                                </span>
                            </div>
                            <small t-if="!message.is_transient" class="o-mail-Message-date text-muted opacity-75 smaller ms-1" t-att-title="message.datetimeShort">
                                <t t-if="message.isPending" t-call="mail.Message.pendingStatus"/>
                                <t t-esc="message.dateSimple"/>
                            </small>
                            <t t-if="isAlignedRight" t-call="mail.Message.notification"/>
                            <t t-if="message.is_note and !message.isPending" t-call="mail.Message.actions"/>
                        </div>
                        <div
                            class="o-mail-Message-contentContainer position-relative d-flex"
                            t-att-class="{
                                   'justify-content-end': isAlignedRight,
                                   'ps-2': env.inChatWindow and isAlignedRight and state.isEditing,
                                   'pe-2': env.inChatWindow and !isAlignedRight and composerViewInEditing,
                                   }"
                        >
                            <div class="o-mail-Message-content min-w-0" t-att-class="{ 'w-100': state.isEditing, 'opacity-50': message.isPending, 'pt-1': message.is_note }">
                                <div class="o-mail-Message-textContent position-relative d-flex" t-att-class="{ 'w-100': state.isEditing }">
                                    <t t-if="message.message_type === 'notification' and message.body" t-call="mail.Message.bodyAsNotification" name="bodyAsNotification"/>
                                    <t t-if="message.message_type !== 'notification' and !message.is_transient and (message.hasTextContent or message.subtype_description or state.isEditing or message.attachments.length > 0)">
                                        <LinkPreviewList t-if="!state.isEditing and message.linkPreviewSquash" linkPreviews="message.linkPreviews" deletable="false"/>
                                        <t t-else="">
                                            <div class="position-relative overflow-x-auto d-inline-block" t-att-class="{ 'w-100': state.isEditing, 'align-self-start rounded-bottom-3': !state.isEditing and !message.is_note, 'rounded-3': props.squashed, 'rounded-bottom-3': !props.squashed }">
                                                <div class="o-mail-Message-bubble position-absolute top-0 start-0 w-100 h-100" t-att-class="{
                                                    'border': state.isEditing and !message.is_note,
                                                    'o-blue border': !message.isSelfAuthored and !message.is_note,
                                                    'o-green border': message.isSelfAuthored and !message.is_note,
                                                    'rounded-3': props.squashed,
                                                    'rounded-start-3 rounded-bottom-3': !props.squashed and isAlignedRight,
                                                    'rounded-end-3 rounded-bottom-3': !props.squashed and !isAlignedRight,
                                                }"/>
                                                <div t-if="message.hasTextContent" class="position-relative text-break o-mail-Message-body" t-ref="body" t-att-class="{
                                                    'p-1': message.is_note,
                                                    'fs-1': !state.isEditing and !env.inChatter and message.onlyEmojis,
                                                    'mb-0 py-2 px-3': !message.is_note and !state.isEditing,
                                                    'align-self-start rounded-end-3 rounded-bottom-3': !props.squashed and !state.isEditing and !message.is_note,
                                                    'rounded-3': props.squashed,
                                                    'o-mail-Message-editable flex-grow-1 px-2': state.isEditing,
                                                }">
                                                    <Composer t-if="state.isEditing" autofocus="true" composer="message.composer" messageComponent="constructor" onDiscardCallback.bind="exitEditMode" onPostCallback.bind="exitEditMode" mode="env.inChatter ? 'extended' : 'compact'" sidebar="false"/>
                                                    <t t-else="">
                                                        <em t-if="message.subject and !message.isSubjectSimilarToThreadName and !message.isSubjectDefault" class="mb-1 me-2">Subject: <t t-out="props.messageSearch?.highlight(message.subject) ?? message.subject"/></em>
                                                        <div t-if="message.message_type and message.message_type.includes('email')" t-ref="shadowBody"/>
                                                        <t t-elif="state.showTranslation" t-out="message.translationValue"/>
                                                        <t t-elif="message.body" t-out="props.messageSearch?.highlight(message.body) ?? message.body"/>
                                                        <p class="fst-italic text-muted small" t-if="state.showTranslation">
                                                            <t t-if="message.translationSource" t-esc="translatedFromText"/>
                                                        </p>
                                                        <p class="fst-italic text-muted small" t-if="message.translationErrors">
                                                            <i class="text-danger fa fa-warning" role="img" aria-label="Translation Failure"/>
                                                            <t t-if="message.translationErrors" t-esc="translationFailureText"/>
                                                        </p>
                                                        <!-- <small t-if="message.editDate" class="o-mail-Message-edited fst-italic text-muted" t-att-class="{ 'ms-2': !message.isBodyEmpty }" t-att-title="message.editDatetimeHuge">(edited)</small> --> <!-- DISABLED because new messages sent by email are wrongly flagged as (edited) -->
                                                        <t t-if="showSubtypeDescription" t-out="props.messageSearch?.highlight(message.subtype_description) ?? message.subtype_description"/>
                                                    </t>
                                                </div>
                                                <AttachmentList
                                                    t-if="message.attachments.length > 0"
                                                    attachments="message.attachments.map((a) => a)"
                                                    unlinkAttachment.bind="onClickAttachmentUnlink"
                                                    imagesHeight="message.attachments.length === 1 ? 300 : 150"
                                                    messageSearch="props.messageSearch"/>
                                                <div class="o-mail-Message-seenContainer position-absolute bottom-0">
                                                    <MessageSeenIndicator
                                                        t-if="showSeenIndicator"
                                                        message="props.message"
                                                        thread="props.thread"
                                                    />
                                                </div>
                                            </div>
                                        </t>
                                    </t>
                                    <t t-if="!message.is_note and !message.isPending and message.hasTextContent" t-call="mail.Message.actions"/>
                                </div>
                                
                                <LinkPreviewList t-if="message.linkPreviews.length > 0 and store.hasLinkPreviewFeature and !message.linkPreviewSquash" linkPreviews="message.linkPreviews" deletable="deletable"/>
                            </div>
                            <t t-if="!message.is_note and !message.isPending and !message.hasTextContent" t-call="mail.Message.actions"/>
                        </div>
                        <MessageReactions message="message" openReactionMenu="openReactionMenu" t-if="message.reactions.length"/>
                    </div>
                </div>
            </div>
        </ActionSwiper>
    </t>

<t t-name="mail.Message.actions">
    <div t-if="props.hasActions and message.hasActions and !state.isEditing" class="o-mail-Message-actions d-print-none"
        t-att-class="{
            'start-0': isAlignedRight,
            'mx-1': !ui.isSmall,
            'mt-1': !ui.isSmall and !message.is_note,
            'my-n2': message.is_note,
            'invisible': !isActive,
            'o-expanded': optionsDropdown.isOpen,
        }"
    >
        <t t-set="isReverse" t-value="env.inChatWindow and isAlignedRight"/>
        <div class="d-flex rounded-1 overflow-hidden" t-att-class="{
                'flex-row-reverse': isReverse,
                'list-group list-group-flush': ui.isSmall,
                'flex-row': ui.isSmall and !isReverse,
            }"
        >
            <t t-foreach="messageActions.actions.slice(0, quickActionCount)" t-as="action" t-key="action.id">
                <t t-call="mail.Message.quickAction">
                    <t t-set="action" t-value="action"/>
                </t>
            </t>
            <t t-if="messageActions.actions.length === quickActionCount + 1" t-call="mail.Message.quickAction">
                <t t-set="action" t-value="messageActions.actions.at(quickActionCount)"/>
            </t>
            <div t-if="messageActions.actions.length gt quickActionCount + 1" class="d-flex rounded-0">
                <Dropdown state="optionsDropdown" position="props.message.threadAsNewest  ? 'top-start' : 'bottom-start'" menuClass="'d-flex flex-column py-0 o-mail-Message-moreMenu rounded-3'" >
                    <button class="btn px-1 py-0 rounded-0" t-att-title="expandText" t-att-class="{
                        'bg-200': optionsDropdown.isOpen,
                        'rounded-start-1': isReverse,
                        'rounded-end-1': !isReverse,
                        'fs-4': ui.isSmall,
                    }">
                        <i class="fa fa-lg fa-ellipsis-h" t-att-class="{ 'order-1': props.isInChatWindow }" tabindex="1"/>
                    </button>
                    <t t-set-slot="content">
                        <t t-foreach="messageActions.actions.slice(quickActionCount)" t-as="action" t-key="action.id">
                            <DropdownItem class="'o-mail-Message-action d-flex align-items-center rounded-0' + (ui.isSmall ? ' fs-4 p-2' : ' px-2') + ' ' + action.class" onSelected="action.onClick" attrs="{ 'aria-label': action.title, 'name': action.id }">
                                <i class="fa fa-fw pe-2 me-1" t-att-class="action.icon" t-attf-class="{{ ui.isSmall ? 'fa-lg' : '' }}"/>
                                <span t-att-class="{ 'small': !ui.isSmall }" t-esc="action.title"/>
                            </DropdownItem>
                        </t>
                    </t>
                </Dropdown>
            </div>
        </div>
    </div>
</t>

<t t-name="mail.Message.quickAction">
    <t t-set="isStart" t-value="(!isReverse and action.isFirst) or (isReverse and action.isLast)"/>
    <t t-set="isEnd" t-value="(!isReverse and action.isLast) or (isReverse and action.isFirst)"/>
    <t t-if="action.callComponent" t-component="action.callComponent" t-props="action.props" classNames="{
        'rounded-start-1': isStart,
        'rounded-end-1': isEnd,
        'fs-4': ui.isSmall,
    }"/>
    <button t-else="" class="o-mail-Message-action btn px-1 py-0 rounded-0" t-att-title="action.title" t-att-name="action.id" t-on-click.stop="action.onClick" t-att-class="{
        'rounded-start-1': isStart,
        'rounded-end-1': isEnd,
        'fs-4': ui.isSmall,
    }">
        <i class="fa fa-lg" t-att-class="action.icon"/>
    </button>
</t>

<t t-name="mail.Message.notification">
    <div t-if="message.thread?.eq(props.thread) and message.notifications.length > 0" class="mx-1">
        <span class="o-mail-Message-notification cursor-pointer" t-att-class="message.failureNotifications.length > 0 ? 'text-danger' : text-600" role="button" tabindex="0" t-on-click="onClickNotification">
            <i t-att-class="message.notifications[0].icon" role="img" aria-label="Delivery failure"/> <span t-if="message.notifications[0].label" t-out="message.notifications[0].label"/>
        </span>
    </div>
</t>

<t t-name="mail.Message.bodyAsNotification">
    <div class="o-mail-Message-body text-break mb-0 w-100">
        <t t-out="props.messageSearch?.highlight(message.body) ?? message.body"/>
    </div>
</t>

<t t-name="mail.Message.pendingStatus">
    <button t-if="message.postFailRedo" class="btn p-0" title="Failed to post the message. Click to retry" t-on-click="() => message.postFailRedo?.()"><i class="fa fa-fw fa-warning text-warning"/></button>
    <span t-else="" class="o-mail-Message-pendingProgress"><i class="fa fa-fw fa-circle-o-notch fa-spin opacity-50"/></span>
</t>

</templates>
